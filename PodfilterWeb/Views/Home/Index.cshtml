@{
    ViewData["Title"] = "Home Page";
}

<h2>Create.</h2>

<form>

    @if(ViewData.ContainsKey("errorMessage") || TempData.ContainsKey("errorMessage"))
    {
        <div class="alert alert-danger" role="alert">
            @ViewData["errorMessage"]
            @TempData["errorMessage"]
        </div>
    }

    @if(ViewData.ContainsKey("infoMessage") || TempData.ContainsKey("infoMessage"))
    {
        <div class="alert alert-info" role="alert">
            @ViewData["infoMessage"]
            @TempData["infoMessage"]
        </div>  
    }

    @if(ViewData.ContainsKey("warningMessage") || TempData.ContainsKey("warningMessage"))
    {
        <div class="alert alert-warning" role="alert">
            @ViewData["warningMessage"]
            @TempData["warningMessage"]
        </div>  
    }

    <div id="podcastUrl" class="row">
        <div class="col-xs-12">
            <label for="podcastInputField">Url of podcast to filter</label>
            <div class="input-group" id="podcastInputField">
                <span class="input-group-btn">
                    <button class="btn btn-secondary" type="submit" formaction="validate" formmethod="post">Validate</button>
                </span>
                <input type="text" class="form-control noMaxWidth" name="urlInputField" value="@ViewData["podcastUrl"]" placeholder="url of podcast to filter">
            </div>
        </div>
    </div>

    <hr />

    <div id="currentFilters" class="row">

        <!-- Controls to add new modifications. -->
        <div class="col-xs-12 col-md-6">
            <label for="newModificationsControls">Add filter</label>
            <div class="row" id="newModificationsControls">
                <div class="form-group col-xs-6">
                    <div class="selectContainer">
                        <select class="form-control" id="newFilterSelector" name="filterType" oninput="newFilterSelectionChanged()">
                            <!-- Filter Types should match the name of their classes! -->
                            <option value="">Choose a filter</option>
                            <option value="EpisodeTitleFilterModification">Title Filter</option>
                            <option value="EpisodeDescriptionFilterModification">Description Filter</option>
                            <option value="EpisodeDurationFilterModification">Duration Filter</option>
                            <option value="EpisodePublishDateFilterModification">Publication Date Filter</option>
                            <option value="RemoveDuplicateEpisodesModification">Duplicate Episodes Filter</option>
                        </select>
                    </div>
                </div>
                <div class="col-xs-6 btn-group" role="group" aria-label="filter actions">
                    <button type="submit" class="btn btn-default" formaction="addFilter" formmethod="post">Add</button>
                    <button type="submit" class="btn btn-default" formaction="removeFilter" formmethod="post">Remove</button>
                </div>
            </div>

            <div class="row">
                <div class="col-xs-12">
                    @Html.Partial("NewFilterParameters")
                </div>
            </div>
        </div>

        <!-- List of the current modifications. -->
        <div class="col-xs-12 col-md-6">
            <label for="currentFiltersListBox">Current Filters</label>
            @if ((int)ViewData["currentFilterCount"] > 0)
            {
                <div class="list-group" id="currentFiltersListBox">
                    @{int i = 0;}
                    @foreach (var filter in ViewData["currentFilters"] as List<PodfilterWeb.Models.DisplayableBasePodcastModification>)
                    {
                        @if ((int)ViewData["selectedFilter"] == i)
                        {
                            <a href="selectFilter/@i" class="list-group-item active">
                                <b>@filter.Name</b> <i><small>&emsp;@filter.DescribeWithTranslator((PodfilterWeb.Helpers.BaseModificationMethodTranslator)ViewData["methodTranslator"])</small></i>
                            </a>
                        }
                        else
                        {
                            <a href="selectFilter/@i" class="list-group-item">
                                <b>@filter.Name</b> <i><small>&emsp;@filter.DescribeWithTranslator((PodfilterWeb.Helpers.BaseModificationMethodTranslator)ViewData["methodTranslator"])</small></i>
                            </a>
                        }
                        i++;
                    }
                </div>
            }
            else
            {
                <div class="well well-sm">
                    You have not added any filters yet.
                </div>
            }
        </div>
    </div>

    <hr />

    @if(TempData.ContainsKey("filteredPodcastUrlTooLong") && (bool)TempData["filteredPodcastUrlTooLong"] == true)
    {
        <div class="alert alert-warning" role="alert">
            The resulting url is longer than 2000 characters. Although this is theoretically allowed most applications do not support this. Please consider using the podcast storage feature.
        </div>  
    }

    <div class="row">
        <div class="col-xs-12 form-group">
            <button class="btn btn-secondary" type="submit" formaction="create" formmethod="post">Create new podcast url!</button>
        </div>
    </div>

    @if(TempData.ContainsKey("filteredPodcastUrl"))
    {
        <div class="row">
            <div class="col-xs-12">
                <label for="longPodcastUrl">Long, permanent url:</label>
                <div class="form-group" id="longPodcastUrl">
                    <input type="text" class="form-control noMaxWidth" placeholder="new podcast url" value="@TempData["filteredPodcastUrl"]" />
                </div>
            </div>
            <div class="col-xs-12">
                <p>
                    This podcast link is valid indefinitely since it contains all the necessary information. Since this makes these urls very long (500+ characters) they are compatible with most browsers but hardly any podcast apps.
                </p>
            </div>
        </div>
    }

    @if(TempData.ContainsKey("savedPodcastUrl"))
    {
        <div class="row">
            <div class="col-xs-12">
                <label for="shortPodcastUrl">Short, temporary url:</label>
                <div class="form-group" id="shortPodcastUrl">
                    <input type="text" class="form-control noMaxWidth" placeholder="new podcast url" value="@TempData["savedPodcastUrl"]" />
                </div>
            </div>
            <div class="col-xs-12">
                <p>
                    This podcast link is valid for 30 days because it is stored in our database. If the podcast is not used within this time it may be deleted. This podcast should work with any browser and podcast app since it does not contain any special characters and is short.
                </p>
            </div>
        </div>
    }

</form>